import { Note } from '@/types/note';
import getNote from '@/utils/getNote';

test.each([
  [6, 0, Note.E],
  [6, 1, Note.F],
  [6, 2, Note.FSharpGFlat],
  [6, 3, Note.G],
  [6, 4, Note.GSharpAFlat],
  [6, 5, Note.A],
  [6, 6, Note.ASharpBFlat],
  [6, 7, Note.B],
  [6, 8, Note.C],
  [6, 9, Note.CSharpDFlat],
  [6, 10, Note.D],
  [6, 11, Note.DSharpEFlat],
  [6, 12, Note.E],
  [5, 0, Note.A],
  [5, 1, Note.ASharpBFlat],
  [5, 2, Note.B],
  [5, 3, Note.C],
  [5, 4, Note.CSharpDFlat],
  [5, 5, Note.D],
  [5, 6, Note.DSharpEFlat],
  [5, 7, Note.E],
  [5, 8, Note.F],
  [5, 9, Note.FSharpGFlat],
  [5, 10, Note.G],
  [5, 11, Note.GSharpAFlat],
  [5, 12, Note.A],
  [4, 0, Note.D],
  [4, 1, Note.DSharpEFlat],
  [4, 2, Note.E],
  [4, 3, Note.F],
  [4, 4, Note.FSharpGFlat],
  [4, 5, Note.G],
  [4, 6, Note.GSharpAFlat],
  [4, 7, Note.A],
  [4, 8, Note.ASharpBFlat],
  [4, 9, Note.B],
  [4, 10, Note.C],
  [4, 11, Note.CSharpDFlat],
  [4, 12, Note.D],
  [3, 0, Note.G],
  [3, 1, Note.GSharpAFlat],
  [3, 2, Note.A],
  [3, 3, Note.ASharpBFlat],
  [3, 4, Note.B],
  [3, 5, Note.C],
  [3, 6, Note.CSharpDFlat],
  [3, 7, Note.D],
  [3, 8, Note.DSharpEFlat],
  [3, 9, Note.E],
  [3, 10, Note.F],
  [3, 11, Note.FSharpGFlat],
  [3, 12, Note.G],
  [2, 0, Note.B],
  [2, 1, Note.C],
  [2, 2, Note.CSharpDFlat],
  [2, 3, Note.D],
  [2, 4, Note.DSharpEFlat],
  [2, 5, Note.E],
  [2, 6, Note.F],
  [2, 7, Note.FSharpGFlat],
  [2, 8, Note.G],
  [2, 9, Note.GSharpAFlat],
  [2, 10, Note.A],
  [2, 11, Note.ASharpBFlat],
  [2, 12, Note.B],
  [1, 0, Note.E],
  [1, 1, Note.F],
  [1, 2, Note.FSharpGFlat],
  [1, 3, Note.G],
  [1, 4, Note.GSharpAFlat],
  [1, 5, Note.A],
  [1, 6, Note.ASharpBFlat],
  [1, 7, Note.B],
  [1, 8, Note.C],
  [1, 9, Note.CSharpDFlat],
  [1, 10, Note.D],
  [1, 11, Note.DSharpEFlat],
  [1, 12, Note.E],
])('get note with string %d and fret %d is %s', (string, fret, note) => {
  expect(getNote(string, fret)).toBe(note);
});
