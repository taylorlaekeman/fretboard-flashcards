import { Note } from '@/types/note';
import String from '@/types/string';
import getNote from '@/utils/getNote';

test.each([
  [String.E, 0, Note.E],
  [String.E, 1, Note.F],
  [String.E, 2, Note.FSharpGFlat],
  [String.E, 3, Note.G],
  [String.E, 4, Note.GSharpAFlat],
  [String.E, 5, Note.A],
  [String.E, 6, Note.ASharpBFlat],
  [String.E, 7, Note.B],
  [String.E, 8, Note.C],
  [String.E, 9, Note.CSharpDFlat],
  [String.E, 10, Note.D],
  [String.E, 11, Note.DSharpEFlat],
  [String.E, 12, Note.E],
  [String.A, 0, Note.A],
  [String.A, 1, Note.ASharpBFlat],
  [String.A, 2, Note.B],
  [String.A, 3, Note.C],
  [String.A, 4, Note.CSharpDFlat],
  [String.A, 5, Note.D],
  [String.A, 6, Note.DSharpEFlat],
  [String.A, 7, Note.E],
  [String.A, 8, Note.F],
  [String.A, 9, Note.FSharpGFlat],
  [String.A, 10, Note.G],
  [String.A, 11, Note.GSharpAFlat],
  [String.A, 12, Note.A],
  [String.D, 0, Note.D],
  [String.D, 1, Note.DSharpEFlat],
  [String.D, 2, Note.E],
  [String.D, 3, Note.F],
  [String.D, 4, Note.FSharpGFlat],
  [String.D, 5, Note.G],
  [String.D, 6, Note.GSharpAFlat],
  [String.D, 7, Note.A],
  [String.D, 8, Note.ASharpBFlat],
  [String.D, 9, Note.B],
  [String.D, 10, Note.C],
  [String.D, 11, Note.CSharpDFlat],
  [String.D, 12, Note.D],
  [String.G, 0, Note.G],
  [String.G, 1, Note.GSharpAFlat],
  [String.G, 2, Note.A],
  [String.G, 3, Note.ASharpBFlat],
  [String.G, 4, Note.B],
  [String.G, 5, Note.C],
  [String.G, 6, Note.CSharpDFlat],
  [String.G, 7, Note.D],
  [String.G, 8, Note.DSharpEFlat],
  [String.G, 9, Note.E],
  [String.G, 10, Note.F],
  [String.G, 11, Note.FSharpGFlat],
  [String.G, 12, Note.G],
  [String.B, 0, Note.B],
  [String.B, 1, Note.C],
  [String.B, 2, Note.CSharpDFlat],
  [String.B, 3, Note.D],
  [String.B, 4, Note.DSharpEFlat],
  [String.B, 5, Note.E],
  [String.B, 6, Note.F],
  [String.B, 7, Note.FSharpGFlat],
  [String.B, 8, Note.G],
  [String.B, 9, Note.GSharpAFlat],
  [String.B, 10, Note.A],
  [String.B, 11, Note.ASharpBFlat],
  [String.B, 12, Note.B],
  [String.e, 0, Note.E],
  [String.e, 1, Note.F],
  [String.e, 2, Note.FSharpGFlat],
  [String.e, 3, Note.G],
  [String.e, 4, Note.GSharpAFlat],
  [String.e, 5, Note.A],
  [String.e, 6, Note.ASharpBFlat],
  [String.e, 7, Note.B],
  [String.e, 8, Note.C],
  [String.e, 9, Note.CSharpDFlat],
  [String.e, 10, Note.D],
  [String.e, 11, Note.DSharpEFlat],
  [String.e, 12, Note.E],
])('get note with string %d and fret %d is %s', (string, fret, note) => {
  expect(getNote(string, fret)).toBe(note);
});
